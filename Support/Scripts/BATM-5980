#! /bin/bash
# SQLfix for GB CAS, repairs one-off SQL issues
# execute via gbfix: https://github.com/DPuppybreath/CAS/blob/master/Support/Scripts/gbfix
# written March 11, 2024 by Chuck Wernicke for General Bytes

# vars
LogFile="/var/log/batm/SQLfix.log";
BATM_CONFIG_FILE="/batm/config/database"

Fail() {
	# this is used to cleanup after a fatal error
	echo "Failure code: "$1
	rm "$OPTION_FILE"
	exit $1
}

LogIt() {
	echo "$(date): $1" >> $LogFile;
}

# introduction & description
echo "This script repairs specific CAS mySQL issues."
echo "Since the database structure may change without warning, this script MAY NOT WORK in the future."
echo "This script has been tested to work with CAS version 20231212 only."
echo
echo "Activity logged in: $LogFile"
echo

MUID=$( id -u )
if [[ $MUID != 0 ]]; then
	echo "This script must be run as sudo!"
	echo "Try: sudo $( basename -- "$0")"
	exit 3
fi

############################################################################# open the CAS database creds
BATMDB="$( grep 'db_name=' "$BATM_CONFIG_FILE" | cut -f2 -d'=' )"
if [[ $? -ne 0 ]]; then
	echo "The db_name could not be found in: $BATM_CONFIG_FILE"
	exit 10
elif [[ ${#BATMDB} -eq 0 ]]; then
	echo "The config file entry for db_name is invalid."
	exit 11
fi

BATMUSER="$( grep 'db_username=' "$BATM_CONFIG_FILE" | cut -f2 -d'=' )"
if [[ $? -ne 0 ]]; then
	echo "The db_username could not be found in: $BATM_CONFIG_FILE"
	exit 12
elif [[ ${#BATMUSER} -eq 0 ]]; then
	echo "The config file entry for db_username is invalid."
	exit 14
fi

BATMPW="$( grep 'db_password=' "$BATM_CONFIG_FILE" | cut -f2 -d'=' )"
if [[ $? -ne 0 ]]; then
	echo "The db_name could not be found in: $BATM_CONFIG_FILE"
	exit 15
elif [[ ${#BATMPW} -eq 0 ]]; then
	echo "The config file entry for db_password is invalid."
	exit 16
fi

echo "mySQL credentials successfully loaded from the database config file."

############################################################################# prepare the options file
DB_HOST='127.0.0.1'
DB_PORT='3306'

TMP_DIR='/batm/tmp'
if [ ! -d "$TMP_DIR" ]; then
	mkdir -m 700 "$TMP_DIR" && chown batm:batm "$TMP_DIR"
fi

OPTION_FILE=$( mktemp --tmpdir="$TMP_DIR")
if [ $? -ne 0 ]; then
	echo "ERROR: can't create temporary option file in: $TMP_DIR"
	exit 20
fi

echo "Using mySQL option file: $OPTION_FILE"
echo -e "[client]\nuser=$BATMUSER\npassword=$BATMPW\nhost=$DB_HOST\nport=$DB_PORT" > "$OPTION_FILE"
if [ $? -ne 0 ]; then
	echo "ERROR: can't write to: $OPTION_FILE"
	exit 21
fi

############################################################################# Must use "Fail" to exit (this point forward)

# verify a log exists and set permissions before attempting any UPDATE SQL statement
# batm user needed for CAS maintenance scripts
if [[ ! -e "$LogFile" ]]; then
	touch "$LogFile" && chown batm:batm "$LogFile"
	if [ $? -ne 0 ]; then
		echo "ERROR: can't create log file: $LogFile"
		Fail 30
	fi
fi

############################################################################# BATM-3570 specific

echo "You are about to erase the most recent Crypto Setting added."
echo "This script is designed to fix a database DST time problem."
echo "NO WARRANTY - PERFORMANCE IS NOT GUARANTEED!"
echo
echo "BACKUP BEFORE PROCEEDING!"
echo
echo "If you proceed:"
echo "  1) your CAS server will be STOPPED,"
echo "  2) another CAS backup will be created,"
echo "  3) the most recent Crypto Setting will be deleted."
echo
echo "After the script is finished, you'll have to start CAS again yourself."
echo
read -n 1 -p "Last chance! Run the script? (Y/n): " YesNo
echo
if [ "${YesNo,,}" != "y" ]; then
	Fail 13
fi

sudo /batm/batm-manage stop all
read -n 1 -p "Backup now? (Y/n): " YesNo
echo
if [ "${YesNo,,}" == "y" ]; then
    sleep 20 # wait for the services to fully stop
    sudo /batm/batm-manage backup
    if [[ $? -ne 0 ]]; then
	    echo "batm-manage ERROR: backup failed"
	    Fail 41
    fi
fi

# get the Terminal serial number
read -p "Please enter the BATM serial number to fix (e.g. BT123456): " BTNUM
echo

# change the last ping times
EXECUTE="UPDATE terminalstatus ts JOIN terminal t ON ts.id = t.status_id SET ts.lastpingat = '2024-03-11T00:00:00', ts.lastinitat = '2024-03-11T00:00:00', ts.connectedat = '2024-03-11T00:00:00' WHERE t.serialnumber = '$BTNUM';"
LogIt "$EXECUTE"
mysql --defaults-extra-file="$OPTION_FILE" --execute="$EXECUTE" "$BATMDB"
if [[ $? -eq 0 ]]; then
	LogIt "Terminal record 1 successfully updated."
else
	LogIt "MYSQL ERROR: record 1 failed to update!"
	Fail 51
fi

EXECUTE="UPDATE terminaldisplay td JOIN terminal t ON td.id = t.display_id set td.updatedat = '2023-03-11T00:00:00' WHERE t.serialnumber = '$BTNUM';"
LogIt "$EXECUTE"
mysql --defaults-extra-file="$OPTION_FILE" --execute="$EXECUTE" "$BATMDB"
if [[ $? -eq 0 ]]; then
	LogIt "Terminal record 2 successfully updated."
else
	LogIt "MYSQL ERROR: record 2 failed to update!"
	Fail 54
fi

echo
echo "Remember to start CAS again!"

###################################################################################### CLEANUP

rm "$OPTION_FILE"
